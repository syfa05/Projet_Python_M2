import pandas as pd
import tkinter as tk
import requests
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import numpy as np
import scipy.interpolate as spi
from plotly.subplots import make_subplots
import json
from datetime import datetime
from scipy.interpolate import CubicSpline
from tkinter import filedialog

class ExcelDataHandler:
    def __init__(self, start_date, end_date):
        self.start_date = start_date
        self.end_date = end_date

    def generate_url(self):
        base_url = "https://odre.opendatasoft.com/api/explore/v2.1/catalog/datasets/consommation-quotidienne-brute/exports/xlsx?lang=fr"
        formatted_start_date = datetime.strptime(self.start_date, "%Y-%m-%d").strftime("%Y-%m-%dT%H:%M:%SZ")
        formatted_end_date = datetime.strptime(self.end_date, "%Y-%m-%d").strftime("%Y-%m-%dT%H:%M:%SZ")
        query = f"(date_heure%3A%5B{formatted_start_date}%20TO%20{formatted_end_date}%5D)"
        return f"{base_url}&qv1={query}&timezone=Europe%2FParis&use_labels=true&delimiter=%3B"

    def save_url_to_excel(self, output_file):
        # Lire les données à partir de l'URL
        response = requests.get(self.generate_url())
        with open('output.xlsx', 'wb') as f:
            f.write(response.content)
        data = pd.read_excel('output.xlsx')

        # Enregistrer les données dans un fichier Excel
        data.to_excel(output_file, index=False)
        
        print(f"Les données ont été enregistrées dans '{output_file}'")



class FileHandler:
    @staticmethod
    def select_file():
        root = tk.Tk()
        root.withdraw()  # Cacher la fenêtre principale
        file_path = filedialog.askopenfilename(title="Sélectionner un fichier Excel", filetypes=[("Excel files", "*.xlsx")])
        return file_path

    @staticmethod
    def import_and_save_excel_file(output_file='output.xlsx'):
        # Demander à l'utilisateur de sélectionner un fichier
        file_path = FileHandler.select_file()

        if not file_path:
            print("Aucun fichier sélectionné")
            return None
        
        # Lire les données à partir du fichier Excel
        data = pd.read_excel(file_path)
        print(f"Les données ont été importées à partir de '{file_path}'")
        
        # Enregistrer les données dans un fichier Excel dans le projet
        data.to_excel(output_file, index=False)
        print(f"Les données ont été enregistrées dans '{output_file}'")
        
        return data

# Importer les données à partir d'un fichier Excel
imported_data = FileHandler.import_and_save_excel_file()
if imported_data is not None:
    print("Données importées avec succès")
else:
    print("Aucune donnée importée")

    # Définir les dates de début et de fin
    start_date = "2022-12-01"
    end_date = "2024-01-31"

    # Créer une instance de ExcelDataHandler
    excel_handler = ExcelDataHandler(start_date, end_date)

    # Nom du fichier de sortie
    output_file = 'output.xlsx'

    # Appeler la fonction pour sauvegarder les données de l'URL dans un fichier Excel
    excel_handler.save_url_to_excel(output_file)


def plot_histograms_from_excel():
    # Lire les données à partir du fichier Excel
    data = pd.read_excel('output.xlsx')

    # Colonnes d'intérêt
    columns_of_interest = [
        'Consommation brute gaz (MW PCS 0°C) - GRTgaz',
        'Consommation brute gaz (MW PCS 0°C) - Teréga',
        'Consommation brute gaz totale (MW PCS 0°C)',
        'Consommation brute électricité (MW) - RTE',
        'Consommation brute totale (MW)'
    ]

    # Calculer les statistiques
    max_values = data[columns_of_interest].max()
    min_values = data[columns_of_interest].min()
    mean_values = data[columns_of_interest].mean()

    # Extraire la plage de temps
    start_time = data['Date'].iloc[0]
    end_time = data['Date'].iloc[-1]
    time_range = f"Plage de temps: {start_time} à {end_time}"

    columns_of_interest_abr = [
        'GRTgaz',
        'Teréga',
        'Total Gaz',
        'RTE',
        'Total'
    ]

    

    # Créer les sous-graphiques
    fig = make_subplots(rows=3, cols=1, subplot_titles=('Valeurs Maximales', 'Valeurs Minimales', 'Valeurs Moyennes'))

    # Histogramme des valeurs maximales
    fig.add_trace(go.Bar(x=columns_of_interest_abr, y=max_values, marker_color='blue', name='Valeurs Maximales'), row=1, col=1)

    # Histogramme des valeurs minimales
    fig.add_trace(go.Bar(x=columns_of_interest_abr, y=min_values, marker_color='red', name='Valeurs Minimales'), row=2, col=1)

    # Histogramme des valeurs moyennes
    fig.add_trace(go.Bar(x=columns_of_interest_abr, y=mean_values, marker_color='green', name='Valeurs Moyennes'), row=3, col=1)

    # Mettre à jour la mise en page
    fig.update_layout(template="plotly_white", height=800, width=800, title_text=f"Consommation de Gaz et d'Électricité du {end_time} au {start_time} ")
    fig.update_yaxes(title_text="Consommation (MW)", range=[0, 40000])

    # Afficher le graphique
    fig.show()

# Appeler la fonction pour tracer les histogrammes
plot_histograms_from_excel()

